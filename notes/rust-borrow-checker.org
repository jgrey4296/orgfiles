#+TITLE: Rust Borrow Checker

* Daniel Keep: Rust Ownership as Tree
A tree is a graph in which every node has at most one incoming edge. This fits
Rust's ownership model perfectly: if you want mutation, then each value needs
exactly one incoming "edge", where an edge can be a mutable reference or direct
ownership. You can also think about code as being part of this tree. Code at the
top of the main loop is "near" the values that are easily accessible. So redraw
has easy access to buffer and game. But if you had a method defined on game, it
wouldn't have easy access to buffer unless redraw passed it down as a separate
argument.

Funny you should mention winit. I've recently been messing around with a toy
project using winit and wgpu, and I've had it on hold for a few days because I
need to refactor it. See, I have textures that are currently owned by the
rendering pipeline that uses them (because this is "logical"). The pipeline is
what knows which texture to load and when to use it.

However, I also want live reloading: any change to an on-disk file should
immediately be reflected in the running program. Currently, this means keeping
all the live reload code mixed in with the rendering code, which is ugly and not
clean. So I very much want to move it out into its own thing that runs in a
separate pass between frames.

But with the current structure, that would mean the reload code needing to
"reach in" to the inside of the render pipelines to modify the textures. And I
don't expect textures to stay owned by render pipelines (that's just a
convenience while experimenting). In an OO language, I would just give both the
reload code and the render code references to the same texture object, but I
can't do that in Rust without involving locks and shared ownership, which I make
a point of avoiding wherever I can.

Basically: everything is currently a tree, but the reload code would require
code running at one part of the tree to "reach down" through other systems to
get at the data it needs. This is messy and hard to maintain. I want the data
and code to be "near" each other in the tree, with easy and uniform access.

So the solution I'm currently avoiding sitting down and doing is ripping all the
textures out of the pipeline, and "moving them up the tree" so they're next to
all the winit and wgpu state. Then, the reload code can directly access the
texture state without touching anything else. The render pipeline will then need
the top level redraw function to borrow and pass down the texture state so it
can do things like actually create and look up the contents of textures when it
needs to.

This is kind of what I mean by the data structure "coming out" of the code. I
didn't really nail down how I wanted to do live reload, so there came a point
where what that code needed was at odds with how I'd structured the data. In an
OO language, I would "solve" this by throwing more references at the problem. In
Rust, I have to actually solve it by redesigning the data layout. It sucks, but
I do find that, in practice, you end up with cleaner and simpler code.

An anecdote: the project I ported to Rust was (before the port) borderline
impossible to understand. Individual parts were pretty straightforward, but how
they interacted was just a complete mess. Porting to Rust forced me to clarify
everything, and the final product was code that was slightly more complex on the
individual level (individual components had to deal with borrows being passed in
and some occasionally large argument lists), but significantly less complex
overall. The actual flow of data was almost universally: "borrow some stuff you
have access to and pass it down".

(That said, I did cheat on a handful of things. Resolving IDs to names ended up
getting a magic global so I didn't have to pass the table down in almost every
function in the codebase. Debug logging in some places used a log behind a
shared mutex, since I didn't care too much about its performance. However, these
were both things that were hard to do because I didn't plan for them, and
refactoring for them would have been extraordinarily painful. Sometimes you have
to live with imperfection...)


* withoutboats: The Dialectical Ratchet

My concerns fundamentally have to do with learnability. I had been approaching this design space based on a particular teaching model, an example of what I'm going to call the dialectical ratchet:

    First, you learn an intuitive, sugary concept that Does What You Mean in the 95% case. This gets you pretty far, and you are a comfortable early Rust user.
    Then, you learn a more explicit syntax, which introduces a whole framework for thinking about a problem. This syntax is harder to learn than the DWIM syntax, but can express more things, and gives you a more rigorous framework for thinking about how Rust works.
    Lastly (the ratchet), you learn that the implicit syntax was just syntactic sugar for the common case of the explicit syntax. Having mastered the explicit framework and paired it with your intuition about the sugary syntax, you can write code quickly, and reach for the elaborated form when you need to express something more complex.

This aligns well with the pre-rigorous/rigorous/post-rigorous framing from previous discussions. An example of something that maps well to this is lifetime syntax:

    First, you just have references, without lifetimes. They do the thing they're supposed to.
    Then, you learn about lifetimes, and how you can use them to track data as it flows in and out of a function.
    Lastly, you learn that all references have lifetimes, they're just being elided using a set of simple rules in most cases.

Applying the dialectical ratchet to impl Trait

I want to be able to apply the same framework to impl Trait:

    You learn at first how to use impl Trait by analogy to something like Java interfaces, and things mostly Just Work. "this takes a ToString and returns an Iterator", you don't worry too much about the sort of polarity issues.
    You learn more formally about generics and "abstract types" (or whatever the feature ends up being called). You develop an understanding of these two features of Rust's polymorphism system.
    You learn that impl Trait is sugar for generics in arguments and "abstract types" in return position. You now can connect your intuitive understanding of impl Trait to the more complete and formal understanding you've developed of polymorphism in Rust.

My concern is that by using impl Trait for the "explicit" form of existentials (by just having it be "impl Trait in type aliases") you will struggle to accomplish this ratchet, because there is no longer this "desugaring" framework - or rather, there is sometimes a desugaring, but sometimes the desugaring is "just more impl Trait" and not really a desugaring.

In contrast, I think the abstract type syntax (or some variation on it) works well for this purpose, because it creates this conceptually distinct language feature separate from impl Trait.

Toward the end of the meeting, @cramertj proposed a different model of teaching, in which impl Trait is a feature, generics are a feature, and neither is explained in terms of one another. If we're going to drop the idea of teaching polymorphism in Rust through a dialectical ratchet, as this would imply, then the syntax proposed by the RFC is viable. But I think that is a significant loss; more significant than the slight loss of uniformity of having abstract type instead of "just impl Trait used everywhere."

* Links
https://users.rust-lang.org/t/the-3d-mental-borrow-checker-breakdown/113314/6
https://github.com/rust-lang/rfcs/pull/2071
